//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://test.xenonfs.com/soap2", ConfigurationName="ServiceReference.XenonServicePortType")]
    public interface XenonServicePortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getContainerTypesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getContainerTypesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getContainerSizesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getContainerSizesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getServiceTypesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getServiceTypesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getSteamshipLinesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getSteamshipLinesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getCustomersList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getCustomersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getLocationsList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getLocationsListAsync(string cityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getCitiesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getCitiesListAsync(string search, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getPortsRampsList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getPortsRampsListAsync(string search, bool piersOnly, bool includeAllPortsRamps);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getPortsRampsListByUnlocode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getPortsRampsListByUnlocodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getRateAsync(string transactionType, string serviceType, string equipmentType, string originDestination, string portRamp, string size, bool overweight, bool hazardous);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#saveQuote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> saveQuoteAsync(
                    string apiCompanyId, 
                    string transactionType, 
                    string serviceType, 
                    string equipmentType, 
                    string originDestination, 
                    string size, 
                    bool overweight, 
                    bool hazardous, 
                    string referenceNumber, 
                    string customerId, 
                    string notes, 
                    string steamshipLine1, 
                    string portRamp1, 
                    string customerRate1, 
                    string steamshipLine2, 
                    string portRamp2, 
                    string customerRate2, 
                    string steamshipLine3, 
                    string portRamp3, 
                    string customerRate3, 
                    string steamshipLine4, 
                    string portRamp4, 
                    string customerRate4, 
                    string steamshipLine5, 
                    string portRamp5, 
                    string customerRate5);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getQuote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getQuoteAsync(string id, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://test.xenonfs.com/soap2#getQuotesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getQuotesListAsync(string page, string limit, string sort, string dir);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface XenonServicePortTypeChannel : ServiceReference.XenonServicePortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class XenonServicePortTypeClient : System.ServiceModel.ClientBase<ServiceReference.XenonServicePortType>, ServiceReference.XenonServicePortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public XenonServicePortTypeClient() : 
                base(XenonServicePortTypeClient.GetDefaultBinding(), XenonServicePortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.XenonServicePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XenonServicePortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(XenonServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), XenonServicePortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XenonServicePortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(XenonServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XenonServicePortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(XenonServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XenonServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> getContainerTypesListAsync()
        {
            return base.Channel.getContainerTypesListAsync();
        }
        
        public System.Threading.Tasks.Task<string> getContainerSizesListAsync()
        {
            return base.Channel.getContainerSizesListAsync();
        }
        
        public System.Threading.Tasks.Task<string> getServiceTypesListAsync()
        {
            return base.Channel.getServiceTypesListAsync();
        }
        
        public System.Threading.Tasks.Task<string> getSteamshipLinesListAsync()
        {
            return base.Channel.getSteamshipLinesListAsync();
        }
        
        public System.Threading.Tasks.Task<string> getCustomersListAsync()
        {
            return base.Channel.getCustomersListAsync();
        }
        
        public System.Threading.Tasks.Task<string> getLocationsListAsync(string cityCode)
        {
            return base.Channel.getLocationsListAsync(cityCode);
        }
        
        public System.Threading.Tasks.Task<string> getCitiesListAsync(string search, string type)
        {
            return base.Channel.getCitiesListAsync(search, type);
        }
        
        public System.Threading.Tasks.Task<string> getPortsRampsListAsync(string search, bool piersOnly, bool includeAllPortsRamps)
        {
            return base.Channel.getPortsRampsListAsync(search, piersOnly, includeAllPortsRamps);
        }
        
        public System.Threading.Tasks.Task<string> getPortsRampsListByUnlocodeAsync(string code)
        {
            return base.Channel.getPortsRampsListByUnlocodeAsync(code);
        }
        
        public System.Threading.Tasks.Task<string> getRateAsync(string transactionType, string serviceType, string equipmentType, string originDestination, string portRamp, string size, bool overweight, bool hazardous)
        {
            return base.Channel.getRateAsync(transactionType, serviceType, equipmentType, originDestination, portRamp, size, overweight, hazardous);
        }
        
        public System.Threading.Tasks.Task<string> saveQuoteAsync(
                    string apiCompanyId, 
                    string transactionType, 
                    string serviceType, 
                    string equipmentType, 
                    string originDestination, 
                    string size, 
                    bool overweight, 
                    bool hazardous, 
                    string referenceNumber, 
                    string customerId, 
                    string notes, 
                    string steamshipLine1, 
                    string portRamp1, 
                    string customerRate1, 
                    string steamshipLine2, 
                    string portRamp2, 
                    string customerRate2, 
                    string steamshipLine3, 
                    string portRamp3, 
                    string customerRate3, 
                    string steamshipLine4, 
                    string portRamp4, 
                    string customerRate4, 
                    string steamshipLine5, 
                    string portRamp5, 
                    string customerRate5)
        {
            return base.Channel.saveQuoteAsync(apiCompanyId, transactionType, serviceType, equipmentType, originDestination, size, overweight, hazardous, referenceNumber, customerId, notes, steamshipLine1, portRamp1, customerRate1, steamshipLine2, portRamp2, customerRate2, steamshipLine3, portRamp3, customerRate3, steamshipLine4, portRamp4, customerRate4, steamshipLine5, portRamp5, customerRate5);
        }
        
        public System.Threading.Tasks.Task<string> getQuoteAsync(string id, string type)
        {
            return base.Channel.getQuoteAsync(id, type);
        }
        
        public System.Threading.Tasks.Task<string> getQuotesListAsync(string page, string limit, string sort, string dir)
        {
            return base.Channel.getQuotesListAsync(page, limit, sort, dir);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.XenonServicePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.XenonServicePort))
            {
                return new System.ServiceModel.EndpointAddress("https://test.xenonfs.com/soap2");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return XenonServicePortTypeClient.GetBindingForEndpoint(EndpointConfiguration.XenonServicePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return XenonServicePortTypeClient.GetEndpointAddress(EndpointConfiguration.XenonServicePort);
        }
        
        public enum EndpointConfiguration
        {
            
            XenonServicePort,
        }
    }
}
